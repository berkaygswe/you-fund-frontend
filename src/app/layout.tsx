// src/app/layout.tsx

export const dynamic = 'force-dynamic'; 

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/hooks/useAuth";
import { getSession } from "@/lib/sessions";
import { User } from "@/types/auth";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  let initialUser = null;

  try {
    const session = await getSession();

    if (session && session.email) {
      // If a session exists, we can infer the user, or fetch more detailed info if needed
      // For simplicity, we'll just use the email from the session for the User object
      // In a real app, you might want to fetch more user details from your authClient API
      // if the session only contains basic info.
      initialUser = { email: session.email } as User;
    }
  } catch (error) {
    console.error('Failed to fetch initial user on server:', error);
    // If the token is invalid/expired, `getCurrentUser` will throw,
    // and `initialUser` will remain null. This is expected.
  }
  
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <AuthProvider initialUser={initialUser}>
          {children}
        </AuthProvider>
      </body>
    </html>
  );
}